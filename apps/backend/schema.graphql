# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type AiChatSession {
  id: ID!
  title: String
  status: AiChatSessionStatusType
  metadata: JSON
  createdAt: DateTime
  updatedAt: DateTime
  lastActiveAt: DateTime
  user: User
  messages(where: AiMessageWhereInput! = {}, orderBy: [AiMessageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AiMessageWhereUniqueInput): [AiMessage!]
  messagesCount(where: AiMessageWhereInput! = {}): Int
}

enum AiChatSessionStatusType {
  active
  paused
  completed
  archived
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input AiChatSessionWhereUniqueInput {
  id: ID
}

input AiChatSessionWhereInput {
  AND: [AiChatSessionWhereInput!]
  OR: [AiChatSessionWhereInput!]
  NOT: [AiChatSessionWhereInput!]
  id: IDFilter
  title: StringFilter
  status: AiChatSessionStatusTypeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  lastActiveAt: DateTimeNullableFilter
  user: UserWhereInput
  messages: AiMessageManyRelationFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input AiChatSessionStatusTypeNullableFilter {
  equals: AiChatSessionStatusType
  in: [AiChatSessionStatusType!]
  notIn: [AiChatSessionStatusType!]
  not: AiChatSessionStatusTypeNullableFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input AiMessageManyRelationFilter {
  every: AiMessageWhereInput
  some: AiMessageWhereInput
  none: AiMessageWhereInput
}

input AiChatSessionOrderByInput {
  id: OrderDirection
  title: OrderDirection
  status: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  lastActiveAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input AiChatSessionUpdateInput {
  title: String
  status: AiChatSessionStatusType
  metadata: JSON
  createdAt: DateTime
  updatedAt: DateTime
  lastActiveAt: DateTime
  user: UserRelateToOneForUpdateInput
  messages: AiMessageRelateToManyForUpdateInput
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input AiMessageRelateToManyForUpdateInput {
  disconnect: [AiMessageWhereUniqueInput!]
  set: [AiMessageWhereUniqueInput!]
  create: [AiMessageCreateInput!]
  connect: [AiMessageWhereUniqueInput!]
}

input AiChatSessionUpdateArgs {
  where: AiChatSessionWhereUniqueInput!
  data: AiChatSessionUpdateInput!
}

input AiChatSessionCreateInput {
  title: String
  status: AiChatSessionStatusType
  metadata: JSON
  createdAt: DateTime
  updatedAt: DateTime
  lastActiveAt: DateTime
  user: UserRelateToOneForCreateInput
  messages: AiMessageRelateToManyForCreateInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input AiMessageRelateToManyForCreateInput {
  create: [AiMessageCreateInput!]
  connect: [AiMessageWhereUniqueInput!]
}

type AiMessage {
  id: ID!
  content: String
  author: AiMessageAuthorType
  model: String
  createdAt: DateTime
  temperature: Float
  latencyMs: Int
  promptTokens: Int
  completionTokens: Int
  totalTokens: Int
  toolName: String
  toolArgs: JSON
  toolResult: JSON
  error: JSON
  session: AiChatSession
  parentMessage: AiMessage
  childMessages(where: AiMessageWhereInput! = {}, orderBy: [AiMessageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AiMessageWhereUniqueInput): [AiMessage!]
  childMessagesCount(where: AiMessageWhereInput! = {}): Int
}

enum AiMessageAuthorType {
  user
  assistant
  system
  tool
}

input AiMessageWhereUniqueInput {
  id: ID
}

input AiMessageWhereInput {
  AND: [AiMessageWhereInput!]
  OR: [AiMessageWhereInput!]
  NOT: [AiMessageWhereInput!]
  id: IDFilter
  content: StringFilter
  author: AiMessageAuthorTypeNullableFilter
  model: StringFilter
  createdAt: DateTimeNullableFilter
  temperature: FloatNullableFilter
  latencyMs: IntNullableFilter
  promptTokens: IntNullableFilter
  completionTokens: IntNullableFilter
  totalTokens: IntNullableFilter
  toolName: StringFilter
  session: AiChatSessionWhereInput
  parentMessage: AiMessageWhereInput
  childMessages: AiMessageManyRelationFilter
}

input AiMessageAuthorTypeNullableFilter {
  equals: AiMessageAuthorType
  in: [AiMessageAuthorType!]
  notIn: [AiMessageAuthorType!]
  not: AiMessageAuthorTypeNullableFilter
}

input FloatNullableFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: FloatNullableFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input AiMessageOrderByInput {
  id: OrderDirection
  content: OrderDirection
  author: OrderDirection
  model: OrderDirection
  createdAt: OrderDirection
  temperature: OrderDirection
  latencyMs: OrderDirection
  promptTokens: OrderDirection
  completionTokens: OrderDirection
  totalTokens: OrderDirection
  toolName: OrderDirection
}

input AiMessageUpdateInput {
  content: String
  author: AiMessageAuthorType
  model: String
  createdAt: DateTime
  temperature: Float
  latencyMs: Int
  promptTokens: Int
  completionTokens: Int
  totalTokens: Int
  toolName: String
  toolArgs: JSON
  toolResult: JSON
  error: JSON
  session: AiChatSessionRelateToOneForUpdateInput
  parentMessage: AiMessageRelateToOneForUpdateInput
  childMessages: AiMessageRelateToManyForUpdateInput
}

input AiChatSessionRelateToOneForUpdateInput {
  create: AiChatSessionCreateInput
  connect: AiChatSessionWhereUniqueInput
  disconnect: Boolean
}

input AiMessageRelateToOneForUpdateInput {
  create: AiMessageCreateInput
  connect: AiMessageWhereUniqueInput
  disconnect: Boolean
}

input AiMessageUpdateArgs {
  where: AiMessageWhereUniqueInput!
  data: AiMessageUpdateInput!
}

input AiMessageCreateInput {
  content: String
  author: AiMessageAuthorType
  model: String
  createdAt: DateTime
  temperature: Float
  latencyMs: Int
  promptTokens: Int
  completionTokens: Int
  totalTokens: Int
  toolName: String
  toolArgs: JSON
  toolResult: JSON
  error: JSON
  session: AiChatSessionRelateToOneForCreateInput
  parentMessage: AiMessageRelateToOneForCreateInput
  childMessages: AiMessageRelateToManyForCreateInput
}

input AiChatSessionRelateToOneForCreateInput {
  create: AiChatSessionCreateInput
  connect: AiChatSessionWhereUniqueInput
}

input AiMessageRelateToOneForCreateInput {
  create: AiMessageCreateInput
  connect: AiMessageWhereUniqueInput
}

type CarePlan {
  id: ID!
  name: String
  user: User
}

input CarePlanWhereUniqueInput {
  id: ID
  user: UserWhereUniqueInput
}

input CarePlanWhereInput {
  AND: [CarePlanWhereInput!]
  OR: [CarePlanWhereInput!]
  NOT: [CarePlanWhereInput!]
  id: IDFilter
  name: StringFilter
  user: UserWhereInput
}

input CarePlanOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input CarePlanUpdateInput {
  name: String
  user: UserRelateToOneForUpdateInput
}

input CarePlanUpdateArgs {
  where: CarePlanWhereUniqueInput!
  data: CarePlanUpdateInput!
}

input CarePlanCreateInput {
  name: String
  user: UserRelateToOneForCreateInput
}

type ForumPost {
  id: ID!
  title: String
  topic: String
  content: String
  createdAt: DateTime
  updatedAt: DateTime
  author: User
}

input ForumPostWhereUniqueInput {
  id: ID
}

input ForumPostWhereInput {
  AND: [ForumPostWhereInput!]
  OR: [ForumPostWhereInput!]
  NOT: [ForumPostWhereInput!]
  id: IDFilter
  title: StringFilter
  topic: StringFilter
  content: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  author: UserWhereInput
}

input ForumPostOrderByInput {
  id: OrderDirection
  title: OrderDirection
  topic: OrderDirection
  content: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ForumPostUpdateInput {
  title: String
  topic: String
  content: String
  createdAt: DateTime
  updatedAt: DateTime
  author: UserRelateToOneForUpdateInput
}

input ForumPostUpdateArgs {
  where: ForumPostWhereUniqueInput!
  data: ForumPostUpdateInput!
}

input ForumPostCreateInput {
  title: String
  topic: String
  content: String
  createdAt: DateTime
  updatedAt: DateTime
  author: UserRelateToOneForCreateInput
}

type Parent {
  id: ID!
  name: String
  user: User
}

input ParentWhereUniqueInput {
  id: ID
  user: UserWhereUniqueInput
}

input ParentWhereInput {
  AND: [ParentWhereInput!]
  OR: [ParentWhereInput!]
  NOT: [ParentWhereInput!]
  id: IDFilter
  name: StringFilter
  user: UserWhereInput
}

input ParentOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input ParentUpdateInput {
  name: String
  user: UserRelateToOneForUpdateInput
}

input ParentUpdateArgs {
  where: ParentWhereUniqueInput!
  data: ParentUpdateInput!
}

input ParentCreateInput {
  name: String
  user: UserRelateToOneForCreateInput
}

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  avatarUrl: String
  age: Int
  gender: String
  privacyToggle: Boolean
  isAdmin: Boolean
  createdAt: DateTime
  lastLoginDate: DateTime
  lastUpdateDate: DateTime
  parent: Parent
  carePlan: CarePlan
  aiChatSessions(where: AiChatSessionWhereInput! = {}, orderBy: [AiChatSessionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AiChatSessionWhereUniqueInput): [AiChatSession!]
  aiChatSessionsCount(where: AiChatSessionWhereInput! = {}): Int
  forumPost(where: ForumPostWhereInput! = {}, orderBy: [ForumPostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ForumPostWhereUniqueInput): [ForumPost!]
  forumPostCount(where: ForumPostWhereInput! = {}): Int
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
  parent: ParentWhereUniqueInput
  carePlan: CarePlanWhereUniqueInput
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  avatarUrl: StringFilter
  age: IntFilter
  gender: StringFilter
  privacyToggle: BooleanFilter
  isAdmin: BooleanFilter
  createdAt: DateTimeNullableFilter
  lastLoginDate: DateTimeNullableFilter
  lastUpdateDate: DateTimeNullableFilter
  parent: ParentWhereInput
  carePlan: CarePlanWhereInput
  aiChatSessions: AiChatSessionManyRelationFilter
  forumPost: ForumPostManyRelationFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input AiChatSessionManyRelationFilter {
  every: AiChatSessionWhereInput
  some: AiChatSessionWhereInput
  none: AiChatSessionWhereInput
}

input ForumPostManyRelationFilter {
  every: ForumPostWhereInput
  some: ForumPostWhereInput
  none: ForumPostWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  avatarUrl: OrderDirection
  age: OrderDirection
  gender: OrderDirection
  privacyToggle: OrderDirection
  isAdmin: OrderDirection
  createdAt: OrderDirection
  lastLoginDate: OrderDirection
  lastUpdateDate: OrderDirection
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  avatarUrl: String
  age: Int
  gender: String
  privacyToggle: Boolean
  isAdmin: Boolean
  createdAt: DateTime
  lastLoginDate: DateTime
  lastUpdateDate: DateTime
  parent: ParentRelateToOneForUpdateInput
  carePlan: CarePlanRelateToOneForUpdateInput
  aiChatSessions: AiChatSessionRelateToManyForUpdateInput
  forumPost: ForumPostRelateToManyForUpdateInput
}

input ParentRelateToOneForUpdateInput {
  create: ParentCreateInput
  connect: ParentWhereUniqueInput
  disconnect: Boolean
}

input CarePlanRelateToOneForUpdateInput {
  create: CarePlanCreateInput
  connect: CarePlanWhereUniqueInput
  disconnect: Boolean
}

input AiChatSessionRelateToManyForUpdateInput {
  disconnect: [AiChatSessionWhereUniqueInput!]
  set: [AiChatSessionWhereUniqueInput!]
  create: [AiChatSessionCreateInput!]
  connect: [AiChatSessionWhereUniqueInput!]
}

input ForumPostRelateToManyForUpdateInput {
  disconnect: [ForumPostWhereUniqueInput!]
  set: [ForumPostWhereUniqueInput!]
  create: [ForumPostCreateInput!]
  connect: [ForumPostWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  avatarUrl: String
  age: Int
  gender: String
  privacyToggle: Boolean
  isAdmin: Boolean
  createdAt: DateTime
  lastLoginDate: DateTime
  lastUpdateDate: DateTime
  parent: ParentRelateToOneForCreateInput
  carePlan: CarePlanRelateToOneForCreateInput
  aiChatSessions: AiChatSessionRelateToManyForCreateInput
  forumPost: ForumPostRelateToManyForCreateInput
}

input ParentRelateToOneForCreateInput {
  create: ParentCreateInput
  connect: ParentWhereUniqueInput
}

input CarePlanRelateToOneForCreateInput {
  create: CarePlanCreateInput
  connect: CarePlanWhereUniqueInput
}

input AiChatSessionRelateToManyForCreateInput {
  create: [AiChatSessionCreateInput!]
  connect: [AiChatSessionWhereUniqueInput!]
}

input ForumPostRelateToManyForCreateInput {
  create: [ForumPostCreateInput!]
  connect: [ForumPostWhereUniqueInput!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createAiChatSession(data: AiChatSessionCreateInput!): AiChatSession
  createAiChatSessions(data: [AiChatSessionCreateInput!]!): [AiChatSession]
  updateAiChatSession(where: AiChatSessionWhereUniqueInput!, data: AiChatSessionUpdateInput!): AiChatSession
  updateAiChatSessions(data: [AiChatSessionUpdateArgs!]!): [AiChatSession]
  deleteAiChatSession(where: AiChatSessionWhereUniqueInput!): AiChatSession
  deleteAiChatSessions(where: [AiChatSessionWhereUniqueInput!]!): [AiChatSession]
  createAiMessage(data: AiMessageCreateInput!): AiMessage
  createAiMessages(data: [AiMessageCreateInput!]!): [AiMessage]
  updateAiMessage(where: AiMessageWhereUniqueInput!, data: AiMessageUpdateInput!): AiMessage
  updateAiMessages(data: [AiMessageUpdateArgs!]!): [AiMessage]
  deleteAiMessage(where: AiMessageWhereUniqueInput!): AiMessage
  deleteAiMessages(where: [AiMessageWhereUniqueInput!]!): [AiMessage]
  createCarePlan(data: CarePlanCreateInput!): CarePlan
  createCarePlans(data: [CarePlanCreateInput!]!): [CarePlan]
  updateCarePlan(where: CarePlanWhereUniqueInput!, data: CarePlanUpdateInput!): CarePlan
  updateCarePlans(data: [CarePlanUpdateArgs!]!): [CarePlan]
  deleteCarePlan(where: CarePlanWhereUniqueInput!): CarePlan
  deleteCarePlans(where: [CarePlanWhereUniqueInput!]!): [CarePlan]
  createForumPost(data: ForumPostCreateInput!): ForumPost
  createForumPosts(data: [ForumPostCreateInput!]!): [ForumPost]
  updateForumPost(where: ForumPostWhereUniqueInput!, data: ForumPostUpdateInput!): ForumPost
  updateForumPosts(data: [ForumPostUpdateArgs!]!): [ForumPost]
  deleteForumPost(where: ForumPostWhereUniqueInput!): ForumPost
  deleteForumPosts(where: [ForumPostWhereUniqueInput!]!): [ForumPost]
  createParent(data: ParentCreateInput!): Parent
  createParents(data: [ParentCreateInput!]!): [Parent]
  updateParent(where: ParentWhereUniqueInput!, data: ParentUpdateInput!): Parent
  updateParents(data: [ParentUpdateArgs!]!): [Parent]
  deleteParent(where: ParentWhereUniqueInput!): Parent
  deleteParents(where: [ParentWhereUniqueInput!]!): [Parent]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  aiChatSession(where: AiChatSessionWhereUniqueInput!): AiChatSession
  aiChatSessions(where: AiChatSessionWhereInput! = {}, orderBy: [AiChatSessionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AiChatSessionWhereUniqueInput): [AiChatSession!]
  aiChatSessionsCount(where: AiChatSessionWhereInput! = {}): Int
  aiMessage(where: AiMessageWhereUniqueInput!): AiMessage
  aiMessages(where: AiMessageWhereInput! = {}, orderBy: [AiMessageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AiMessageWhereUniqueInput): [AiMessage!]
  aiMessagesCount(where: AiMessageWhereInput! = {}): Int
  carePlan(where: CarePlanWhereUniqueInput!): CarePlan
  carePlans(where: CarePlanWhereInput! = {}, orderBy: [CarePlanOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CarePlanWhereUniqueInput): [CarePlan!]
  carePlansCount(where: CarePlanWhereInput! = {}): Int
  forumPost(where: ForumPostWhereUniqueInput!): ForumPost
  forumPosts(where: ForumPostWhereInput! = {}, orderBy: [ForumPostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ForumPostWhereUniqueInput): [ForumPost!]
  forumPostsCount(where: ForumPostWhereInput! = {}): Int
  parent(where: ParentWhereUniqueInput!): Parent
  parents(where: ParentWhereInput! = {}, orderBy: [ParentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ParentWhereUniqueInput): [Parent!]
  parentsCount(where: ParentWhereInput! = {}): Int
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  graphql: KeystoneAdminUIGraphQL!
  initialColumns: [String!]!
  initialSearchFields: [String!]!
  initialSort: KeystoneAdminUISort
  isSingleton: Boolean!
  hideCreate: Boolean!
  hideDelete: Boolean!
  isHidden: Boolean!
  itemQueryName: String!
  listQueryName: String!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUIGraphQL {
  names: KeystoneAdminUIGraphQLNames!
}

type KeystoneAdminUIGraphQLNames {
  outputTypeName: String!
  whereInputName: String!
  whereUniqueInputName: String!
  createInputName: String!
  createMutationName: String!
  createManyMutationName: String!
  relateToOneForCreateInputName: String!
  relateToManyForCreateInputName: String!
  itemQueryName: String!
  listOrderName: String!
  listQueryCountName: String!
  listQueryName: String!
  updateInputName: String!
  updateMutationName: String!
  updateManyInputName: String!
  updateManyMutationName: String!
  relateToOneForUpdateInputName: String!
  relateToManyForUpdateInputName: String!
  deleteMutationName: String!
  deleteManyMutationName: String!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
