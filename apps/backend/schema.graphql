# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type AiChatSession {
  id: ID!
  title: String
  status: AiChatSessionStatusType
  metadata: JSON
  createdAt: DateTime
  updatedAt: DateTime
  lastActiveAt: DateTime
  user: User
  messages(where: AiMessageWhereInput! = {}, orderBy: [AiMessageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AiMessageWhereUniqueInput): [AiMessage!]
  messagesCount(where: AiMessageWhereInput! = {}): Int
}

enum AiChatSessionStatusType {
  active
  paused
  completed
  archived
}

"""Date custom scalar type"""
scalar DateTime

input AiChatSessionWhereUniqueInput {
  id: ID
}

input AiChatSessionWhereInput {
  AND: [AiChatSessionWhereInput!]
  OR: [AiChatSessionWhereInput!]
  NOT: [AiChatSessionWhereInput!]
  id: IDFilter
  title: StringFilter
  status: AiChatSessionStatusTypeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  lastActiveAt: DateTimeNullableFilter
  user: UserWhereInput
  messages: AiMessageManyRelationFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input AiChatSessionStatusTypeNullableFilter {
  equals: AiChatSessionStatusType
  in: [AiChatSessionStatusType!]
  notIn: [AiChatSessionStatusType!]
  not: AiChatSessionStatusTypeNullableFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input AiMessageManyRelationFilter {
  every: AiMessageWhereInput
  some: AiMessageWhereInput
  none: AiMessageWhereInput
}

input AiChatSessionOrderByInput {
  id: OrderDirection
  title: OrderDirection
  status: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  lastActiveAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input AiChatSessionUpdateInput {
  title: String
  status: AiChatSessionStatusType
  metadata: JSON
  createdAt: DateTime
  updatedAt: DateTime
  lastActiveAt: DateTime
  user: UserRelateToOneForUpdateInput
  messages: AiMessageRelateToManyForUpdateInput
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input AiMessageRelateToManyForUpdateInput {
  disconnect: [AiMessageWhereUniqueInput!]
  set: [AiMessageWhereUniqueInput!]
  create: [AiMessageCreateInput!]
  connect: [AiMessageWhereUniqueInput!]
}

input AiChatSessionUpdateArgs {
  where: AiChatSessionWhereUniqueInput!
  data: AiChatSessionUpdateInput!
}

input AiChatSessionCreateInput {
  title: String
  status: AiChatSessionStatusType
  metadata: JSON
  createdAt: DateTime
  updatedAt: DateTime
  lastActiveAt: DateTime
  user: UserRelateToOneForCreateInput
  messages: AiMessageRelateToManyForCreateInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input AiMessageRelateToManyForCreateInput {
  create: [AiMessageCreateInput!]
  connect: [AiMessageWhereUniqueInput!]
}

type AiMessage {
  id: ID!
  content: String
  author: AiMessageAuthorType
  model: String
  createdAt: DateTime
  temperature: Float
  latencyMs: Int
  promptTokens: Int
  completionTokens: Int
  totalTokens: Int
  toolName: String
  toolArgs: JSON
  toolResult: JSON
  error: JSON
  session: AiChatSession
  parentMessage: AiMessage
  childMessages(where: AiMessageWhereInput! = {}, orderBy: [AiMessageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AiMessageWhereUniqueInput): [AiMessage!]
  childMessagesCount(where: AiMessageWhereInput! = {}): Int
}

enum AiMessageAuthorType {
  user
  assistant
  system
  tool
}

input AiMessageWhereUniqueInput {
  id: ID
}

input AiMessageWhereInput {
  AND: [AiMessageWhereInput!]
  OR: [AiMessageWhereInput!]
  NOT: [AiMessageWhereInput!]
  id: IDFilter
  content: StringFilter
  author: AiMessageAuthorTypeNullableFilter
  model: StringFilter
  createdAt: DateTimeNullableFilter
  temperature: FloatNullableFilter
  latencyMs: IntNullableFilter
  promptTokens: IntNullableFilter
  completionTokens: IntNullableFilter
  totalTokens: IntNullableFilter
  toolName: StringFilter
  session: AiChatSessionWhereInput
  parentMessage: AiMessageWhereInput
  childMessages: AiMessageManyRelationFilter
}

input AiMessageAuthorTypeNullableFilter {
  equals: AiMessageAuthorType
  in: [AiMessageAuthorType!]
  notIn: [AiMessageAuthorType!]
  not: AiMessageAuthorTypeNullableFilter
}

input FloatNullableFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: FloatNullableFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input AiMessageOrderByInput {
  id: OrderDirection
  content: OrderDirection
  author: OrderDirection
  model: OrderDirection
  createdAt: OrderDirection
  temperature: OrderDirection
  latencyMs: OrderDirection
  promptTokens: OrderDirection
  completionTokens: OrderDirection
  totalTokens: OrderDirection
  toolName: OrderDirection
}

input AiMessageUpdateInput {
  content: String
  author: AiMessageAuthorType
  model: String
  createdAt: DateTime
  temperature: Float
  latencyMs: Int
  promptTokens: Int
  completionTokens: Int
  totalTokens: Int
  toolName: String
  toolArgs: JSON
  toolResult: JSON
  error: JSON
  session: AiChatSessionRelateToOneForUpdateInput
  parentMessage: AiMessageRelateToOneForUpdateInput
  childMessages: AiMessageRelateToManyForUpdateInput
}

input AiChatSessionRelateToOneForUpdateInput {
  create: AiChatSessionCreateInput
  connect: AiChatSessionWhereUniqueInput
  disconnect: Boolean
}

input AiMessageRelateToOneForUpdateInput {
  create: AiMessageCreateInput
  connect: AiMessageWhereUniqueInput
  disconnect: Boolean
}

input AiMessageUpdateArgs {
  where: AiMessageWhereUniqueInput!
  data: AiMessageUpdateInput!
}

input AiMessageCreateInput {
  content: String
  author: AiMessageAuthorType
  model: String
  createdAt: DateTime
  temperature: Float
  latencyMs: Int
  promptTokens: Int
  completionTokens: Int
  totalTokens: Int
  toolName: String
  toolArgs: JSON
  toolResult: JSON
  error: JSON
  session: AiChatSessionRelateToOneForCreateInput
  parentMessage: AiMessageRelateToOneForCreateInput
  childMessages: AiMessageRelateToManyForCreateInput
}

input AiChatSessionRelateToOneForCreateInput {
  create: AiChatSessionCreateInput
  connect: AiChatSessionWhereUniqueInput
}

input AiMessageRelateToOneForCreateInput {
  create: AiMessageCreateInput
  connect: AiMessageWhereUniqueInput
}

type CarePlan {
  id: ID!
  name: String
  progressScore: Float
  lastAssessmentAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  user: User
  questionnaires(where: QuestionnaireWhereInput! = {}, orderBy: [QuestionnaireOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: QuestionnaireWhereUniqueInput): [Questionnaire!]
  questionnairesCount(where: QuestionnaireWhereInput! = {}): Int
  questionnaireResponses(where: QuestionnaireResponseWhereInput! = {}, orderBy: [QuestionnaireResponseOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: QuestionnaireResponseWhereUniqueInput): [QuestionnaireResponse!]
  questionnaireResponsesCount(where: QuestionnaireResponseWhereInput! = {}): Int
}

input CarePlanWhereUniqueInput {
  id: ID
}

input CarePlanWhereInput {
  AND: [CarePlanWhereInput!]
  OR: [CarePlanWhereInput!]
  NOT: [CarePlanWhereInput!]
  id: IDFilter
  name: StringFilter
  progressScore: FloatNullableFilter
  lastAssessmentAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  user: UserWhereInput
  questionnaires: QuestionnaireManyRelationFilter
  questionnaireResponses: QuestionnaireResponseManyRelationFilter
}

input QuestionnaireManyRelationFilter {
  every: QuestionnaireWhereInput
  some: QuestionnaireWhereInput
  none: QuestionnaireWhereInput
}

input QuestionnaireResponseManyRelationFilter {
  every: QuestionnaireResponseWhereInput
  some: QuestionnaireResponseWhereInput
  none: QuestionnaireResponseWhereInput
}

input CarePlanOrderByInput {
  id: OrderDirection
  name: OrderDirection
  progressScore: OrderDirection
  lastAssessmentAt: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input CarePlanUpdateInput {
  name: String
  progressScore: Float
  lastAssessmentAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  user: UserRelateToOneForUpdateInput
  questionnaires: QuestionnaireRelateToManyForUpdateInput
  questionnaireResponses: QuestionnaireResponseRelateToManyForUpdateInput
}

input QuestionnaireRelateToManyForUpdateInput {
  disconnect: [QuestionnaireWhereUniqueInput!]
  set: [QuestionnaireWhereUniqueInput!]
  create: [QuestionnaireCreateInput!]
  connect: [QuestionnaireWhereUniqueInput!]
}

input QuestionnaireResponseRelateToManyForUpdateInput {
  disconnect: [QuestionnaireResponseWhereUniqueInput!]
  set: [QuestionnaireResponseWhereUniqueInput!]
  create: [QuestionnaireResponseCreateInput!]
  connect: [QuestionnaireResponseWhereUniqueInput!]
}

input CarePlanUpdateArgs {
  where: CarePlanWhereUniqueInput!
  data: CarePlanUpdateInput!
}

input CarePlanCreateInput {
  name: String
  progressScore: Float
  lastAssessmentAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  user: UserRelateToOneForCreateInput
  questionnaires: QuestionnaireRelateToManyForCreateInput
  questionnaireResponses: QuestionnaireResponseRelateToManyForCreateInput
}

input QuestionnaireRelateToManyForCreateInput {
  create: [QuestionnaireCreateInput!]
  connect: [QuestionnaireWhereUniqueInput!]
}

input QuestionnaireResponseRelateToManyForCreateInput {
  create: [QuestionnaireResponseCreateInput!]
  connect: [QuestionnaireResponseWhereUniqueInput!]
}

type ChatMessage {
  id: ID!
  message: String
  createdAt: DateTime
  group: GroupChat
  sender: User
}

input ChatMessageWhereUniqueInput {
  id: ID
}

input ChatMessageWhereInput {
  AND: [ChatMessageWhereInput!]
  OR: [ChatMessageWhereInput!]
  NOT: [ChatMessageWhereInput!]
  id: IDFilter
  message: StringFilter
  createdAt: DateTimeNullableFilter
  group: GroupChatWhereInput
  sender: UserWhereInput
}

input ChatMessageOrderByInput {
  id: OrderDirection
  message: OrderDirection
  createdAt: OrderDirection
}

input ChatMessageUpdateInput {
  message: String
  createdAt: DateTime
  group: GroupChatRelateToOneForUpdateInput
  sender: UserRelateToOneForUpdateInput
}

input GroupChatRelateToOneForUpdateInput {
  create: GroupChatCreateInput
  connect: GroupChatWhereUniqueInput
  disconnect: Boolean
}

input ChatMessageUpdateArgs {
  where: ChatMessageWhereUniqueInput!
  data: ChatMessageUpdateInput!
}

input ChatMessageCreateInput {
  message: String
  createdAt: DateTime
  group: GroupChatRelateToOneForCreateInput
  sender: UserRelateToOneForCreateInput
}

input GroupChatRelateToOneForCreateInput {
  create: GroupChatCreateInput
  connect: GroupChatWhereUniqueInput
}

type Checklist {
  id: ID!
  name: String!
  completionScore: Float
  createdAt: DateTime
  updatedAt: DateTime
  resources(where: ResourceWhereInput! = {}, orderBy: [ResourceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ResourceWhereUniqueInput): [Resource!]
  resourcesCount(where: ResourceWhereInput! = {}): Int
  questionnaires(where: QuestionnaireWhereInput! = {}, orderBy: [QuestionnaireOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: QuestionnaireWhereUniqueInput): [Questionnaire!]
  questionnairesCount(where: QuestionnaireWhereInput! = {}): Int
  questionnaireResponses(where: QuestionnaireResponseWhereInput! = {}, orderBy: [QuestionnaireResponseOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: QuestionnaireResponseWhereUniqueInput): [QuestionnaireResponse!]
  questionnaireResponsesCount(where: QuestionnaireResponseWhereInput! = {}): Int
}

input ChecklistWhereUniqueInput {
  id: ID
}

input ChecklistWhereInput {
  AND: [ChecklistWhereInput!]
  OR: [ChecklistWhereInput!]
  NOT: [ChecklistWhereInput!]
  id: IDFilter
  name: StringFilter
  completionScore: FloatNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  resources: ResourceManyRelationFilter
  questionnaires: QuestionnaireManyRelationFilter
  questionnaireResponses: QuestionnaireResponseManyRelationFilter
}

input ResourceManyRelationFilter {
  every: ResourceWhereInput
  some: ResourceWhereInput
  none: ResourceWhereInput
}

input ChecklistOrderByInput {
  id: OrderDirection
  name: OrderDirection
  completionScore: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ChecklistUpdateInput {
  name: String
  completionScore: Float
  createdAt: DateTime
  updatedAt: DateTime
  resources: ResourceRelateToManyForUpdateInput
  questionnaires: QuestionnaireRelateToManyForUpdateInput
  questionnaireResponses: QuestionnaireResponseRelateToManyForUpdateInput
}

input ResourceRelateToManyForUpdateInput {
  disconnect: [ResourceWhereUniqueInput!]
  set: [ResourceWhereUniqueInput!]
  create: [ResourceCreateInput!]
  connect: [ResourceWhereUniqueInput!]
}

input ChecklistUpdateArgs {
  where: ChecklistWhereUniqueInput!
  data: ChecklistUpdateInput!
}

input ChecklistCreateInput {
  name: String
  completionScore: Float
  createdAt: DateTime
  updatedAt: DateTime
  resources: ResourceRelateToManyForCreateInput
  questionnaires: QuestionnaireRelateToManyForCreateInput
  questionnaireResponses: QuestionnaireResponseRelateToManyForCreateInput
}

input ResourceRelateToManyForCreateInput {
  create: [ResourceCreateInput!]
  connect: [ResourceWhereUniqueInput!]
}

type ForumPost {
  id: ID!
  title: String
  topic: String
  content: String
  createdAt: DateTime
  updatedAt: DateTime
  author: User
}

input ForumPostWhereUniqueInput {
  id: ID
}

input ForumPostWhereInput {
  AND: [ForumPostWhereInput!]
  OR: [ForumPostWhereInput!]
  NOT: [ForumPostWhereInput!]
  id: IDFilter
  title: StringFilter
  topic: StringFilter
  content: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  author: UserWhereInput
}

input ForumPostOrderByInput {
  id: OrderDirection
  title: OrderDirection
  topic: OrderDirection
  content: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ForumPostUpdateInput {
  title: String
  topic: String
  content: String
  createdAt: DateTime
  updatedAt: DateTime
  author: UserRelateToOneForUpdateInput
}

input ForumPostUpdateArgs {
  where: ForumPostWhereUniqueInput!
  data: ForumPostUpdateInput!
}

input ForumPostCreateInput {
  title: String
  topic: String
  content: String
  createdAt: DateTime
  updatedAt: DateTime
  author: UserRelateToOneForCreateInput
}

type GroupChat {
  id: ID!
  groupName: String
  messages(where: ChatMessageWhereInput! = {}, orderBy: [ChatMessageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ChatMessageWhereUniqueInput): [ChatMessage!]
  messagesCount(where: ChatMessageWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  owner: User
  members(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  membersCount(where: UserWhereInput! = {}): Int
}

input GroupChatWhereUniqueInput {
  id: ID
}

input GroupChatWhereInput {
  AND: [GroupChatWhereInput!]
  OR: [GroupChatWhereInput!]
  NOT: [GroupChatWhereInput!]
  id: IDFilter
  groupName: StringFilter
  messages: ChatMessageManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  owner: UserWhereInput
  members: UserManyRelationFilter
}

input ChatMessageManyRelationFilter {
  every: ChatMessageWhereInput
  some: ChatMessageWhereInput
  none: ChatMessageWhereInput
}

input UserManyRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input GroupChatOrderByInput {
  id: OrderDirection
  groupName: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input GroupChatUpdateInput {
  groupName: String
  messages: ChatMessageRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  owner: UserRelateToOneForUpdateInput
  members: UserRelateToManyForUpdateInput
}

input ChatMessageRelateToManyForUpdateInput {
  disconnect: [ChatMessageWhereUniqueInput!]
  set: [ChatMessageWhereUniqueInput!]
  create: [ChatMessageCreateInput!]
  connect: [ChatMessageWhereUniqueInput!]
}

input UserRelateToManyForUpdateInput {
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input GroupChatUpdateArgs {
  where: GroupChatWhereUniqueInput!
  data: GroupChatUpdateInput!
}

input GroupChatCreateInput {
  groupName: String
  messages: ChatMessageRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  owner: UserRelateToOneForCreateInput
  members: UserRelateToManyForCreateInput
}

input ChatMessageRelateToManyForCreateInput {
  create: [ChatMessageCreateInput!]
  connect: [ChatMessageWhereUniqueInput!]
}

input UserRelateToManyForCreateInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

type Parent {
  id: ID!
  name: String
  age: Int
  relationship: String
  healthConditions: JSON
  createdAt: DateTime
  updatedAt: DateTime
  user: User
}

input ParentWhereUniqueInput {
  id: ID
}

input ParentWhereInput {
  AND: [ParentWhereInput!]
  OR: [ParentWhereInput!]
  NOT: [ParentWhereInput!]
  id: IDFilter
  name: StringFilter
  age: IntFilter
  relationship: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  user: UserWhereInput
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input ParentOrderByInput {
  id: OrderDirection
  name: OrderDirection
  age: OrderDirection
  relationship: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ParentUpdateInput {
  name: String
  age: Int
  relationship: String
  healthConditions: JSON
  createdAt: DateTime
  updatedAt: DateTime
  user: UserRelateToOneForUpdateInput
}

input ParentUpdateArgs {
  where: ParentWhereUniqueInput!
  data: ParentUpdateInput!
}

input ParentCreateInput {
  name: String
  age: Int
  relationship: String
  healthConditions: JSON
  createdAt: DateTime
  updatedAt: DateTime
  user: UserRelateToOneForCreateInput
}

type Question {
  id: ID!
  questionText: String
  questionType: QuestionQuestionTypeType
  options: JSON
  isRequired: Boolean
  order: Int
  category: String
  minValue: Int
  maxValue: Int
  questionnaire: Questionnaire
  responses(where: QuestionResponseWhereInput! = {}, orderBy: [QuestionResponseOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: QuestionResponseWhereUniqueInput): [QuestionResponse!]
  responsesCount(where: QuestionResponseWhereInput! = {}): Int
}

enum QuestionQuestionTypeType {
  text
  multiple_choice
  rating_scale
  boolean
  scale
}

input QuestionWhereUniqueInput {
  id: ID
}

input QuestionWhereInput {
  AND: [QuestionWhereInput!]
  OR: [QuestionWhereInput!]
  NOT: [QuestionWhereInput!]
  id: IDFilter
  questionText: StringFilter
  questionType: QuestionQuestionTypeTypeNullableFilter
  isRequired: BooleanFilter
  order: IntNullableFilter
  category: StringFilter
  minValue: IntNullableFilter
  maxValue: IntNullableFilter
  questionnaire: QuestionnaireWhereInput
  responses: QuestionResponseManyRelationFilter
}

input QuestionQuestionTypeTypeNullableFilter {
  equals: QuestionQuestionTypeType
  in: [QuestionQuestionTypeType!]
  notIn: [QuestionQuestionTypeType!]
  not: QuestionQuestionTypeTypeNullableFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input QuestionResponseManyRelationFilter {
  every: QuestionResponseWhereInput
  some: QuestionResponseWhereInput
  none: QuestionResponseWhereInput
}

input QuestionOrderByInput {
  id: OrderDirection
  questionText: OrderDirection
  questionType: OrderDirection
  isRequired: OrderDirection
  order: OrderDirection
  category: OrderDirection
  minValue: OrderDirection
  maxValue: OrderDirection
}

input QuestionUpdateInput {
  questionText: String
  questionType: QuestionQuestionTypeType
  options: JSON
  isRequired: Boolean
  order: Int
  category: String
  minValue: Int
  maxValue: Int
  questionnaire: QuestionnaireRelateToOneForUpdateInput
  responses: QuestionResponseRelateToManyForUpdateInput
}

input QuestionnaireRelateToOneForUpdateInput {
  create: QuestionnaireCreateInput
  connect: QuestionnaireWhereUniqueInput
  disconnect: Boolean
}

input QuestionResponseRelateToManyForUpdateInput {
  disconnect: [QuestionResponseWhereUniqueInput!]
  set: [QuestionResponseWhereUniqueInput!]
  create: [QuestionResponseCreateInput!]
  connect: [QuestionResponseWhereUniqueInput!]
}

input QuestionUpdateArgs {
  where: QuestionWhereUniqueInput!
  data: QuestionUpdateInput!
}

input QuestionCreateInput {
  questionText: String
  questionType: QuestionQuestionTypeType
  options: JSON
  isRequired: Boolean
  order: Int
  category: String
  minValue: Int
  maxValue: Int
  questionnaire: QuestionnaireRelateToOneForCreateInput
  responses: QuestionResponseRelateToManyForCreateInput
}

input QuestionnaireRelateToOneForCreateInput {
  create: QuestionnaireCreateInput
  connect: QuestionnaireWhereUniqueInput
}

input QuestionResponseRelateToManyForCreateInput {
  create: [QuestionResponseCreateInput!]
  connect: [QuestionResponseWhereUniqueInput!]
}

type QuestionResponse {
  id: ID!
  answer: JSON
  confidence: Int
  notes: String
  answeredAt: DateTime
  updatedAt: DateTime
  question: Question
  questionnaireResponse: QuestionnaireResponse
}

input QuestionResponseWhereUniqueInput {
  id: ID
}

input QuestionResponseWhereInput {
  AND: [QuestionResponseWhereInput!]
  OR: [QuestionResponseWhereInput!]
  NOT: [QuestionResponseWhereInput!]
  id: IDFilter
  confidence: IntNullableFilter
  notes: StringFilter
  answeredAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  question: QuestionWhereInput
  questionnaireResponse: QuestionnaireResponseWhereInput
}

input QuestionResponseOrderByInput {
  id: OrderDirection
  confidence: OrderDirection
  notes: OrderDirection
  answeredAt: OrderDirection
  updatedAt: OrderDirection
}

input QuestionResponseUpdateInput {
  answer: JSON
  confidence: Int
  notes: String
  answeredAt: DateTime
  updatedAt: DateTime
  question: QuestionRelateToOneForUpdateInput
  questionnaireResponse: QuestionnaireResponseRelateToOneForUpdateInput
}

input QuestionRelateToOneForUpdateInput {
  create: QuestionCreateInput
  connect: QuestionWhereUniqueInput
  disconnect: Boolean
}

input QuestionnaireResponseRelateToOneForUpdateInput {
  create: QuestionnaireResponseCreateInput
  connect: QuestionnaireResponseWhereUniqueInput
  disconnect: Boolean
}

input QuestionResponseUpdateArgs {
  where: QuestionResponseWhereUniqueInput!
  data: QuestionResponseUpdateInput!
}

input QuestionResponseCreateInput {
  answer: JSON
  confidence: Int
  notes: String
  answeredAt: DateTime
  updatedAt: DateTime
  question: QuestionRelateToOneForCreateInput
  questionnaireResponse: QuestionnaireResponseRelateToOneForCreateInput
}

input QuestionRelateToOneForCreateInput {
  create: QuestionCreateInput
  connect: QuestionWhereUniqueInput
}

input QuestionnaireResponseRelateToOneForCreateInput {
  create: QuestionnaireResponseCreateInput
  connect: QuestionnaireResponseWhereUniqueInput
}

type Questionnaire {
  id: ID!
  title: String
  description: String
  questionnaireType: QuestionnaireQuestionnaireTypeType
  category: String
  isActive: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  questions(where: QuestionWhereInput! = {}, orderBy: [QuestionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: QuestionWhereUniqueInput): [Question!]
  questionsCount(where: QuestionWhereInput! = {}): Int
  responses(where: QuestionnaireResponseWhereInput! = {}, orderBy: [QuestionnaireResponseOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: QuestionnaireResponseWhereUniqueInput): [QuestionnaireResponse!]
  responsesCount(where: QuestionnaireResponseWhereInput! = {}): Int
  carePlans(where: CarePlanWhereInput! = {}, orderBy: [CarePlanOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CarePlanWhereUniqueInput): [CarePlan!]
  carePlansCount(where: CarePlanWhereInput! = {}): Int
  checklists(where: ChecklistWhereInput! = {}, orderBy: [ChecklistOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ChecklistWhereUniqueInput): [Checklist!]
  checklistsCount(where: ChecklistWhereInput! = {}): Int
}

enum QuestionnaireQuestionnaireTypeType {
  care_plan_assessment
  checklist_evaluation
  general_assessment
  progress_review
}

input QuestionnaireWhereUniqueInput {
  id: ID
}

input QuestionnaireWhereInput {
  AND: [QuestionnaireWhereInput!]
  OR: [QuestionnaireWhereInput!]
  NOT: [QuestionnaireWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
  questionnaireType: QuestionnaireQuestionnaireTypeTypeNullableFilter
  category: StringFilter
  isActive: BooleanFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  questions: QuestionManyRelationFilter
  responses: QuestionnaireResponseManyRelationFilter
  carePlans: CarePlanManyRelationFilter
  checklists: ChecklistManyRelationFilter
}

input QuestionnaireQuestionnaireTypeTypeNullableFilter {
  equals: QuestionnaireQuestionnaireTypeType
  in: [QuestionnaireQuestionnaireTypeType!]
  notIn: [QuestionnaireQuestionnaireTypeType!]
  not: QuestionnaireQuestionnaireTypeTypeNullableFilter
}

input QuestionManyRelationFilter {
  every: QuestionWhereInput
  some: QuestionWhereInput
  none: QuestionWhereInput
}

input CarePlanManyRelationFilter {
  every: CarePlanWhereInput
  some: CarePlanWhereInput
  none: CarePlanWhereInput
}

input ChecklistManyRelationFilter {
  every: ChecklistWhereInput
  some: ChecklistWhereInput
  none: ChecklistWhereInput
}

input QuestionnaireOrderByInput {
  id: OrderDirection
  title: OrderDirection
  description: OrderDirection
  questionnaireType: OrderDirection
  category: OrderDirection
  isActive: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input QuestionnaireUpdateInput {
  title: String
  description: String
  questionnaireType: QuestionnaireQuestionnaireTypeType
  category: String
  isActive: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  questions: QuestionRelateToManyForUpdateInput
  responses: QuestionnaireResponseRelateToManyForUpdateInput
  carePlans: CarePlanRelateToManyForUpdateInput
  checklists: ChecklistRelateToManyForUpdateInput
}

input QuestionRelateToManyForUpdateInput {
  disconnect: [QuestionWhereUniqueInput!]
  set: [QuestionWhereUniqueInput!]
  create: [QuestionCreateInput!]
  connect: [QuestionWhereUniqueInput!]
}

input CarePlanRelateToManyForUpdateInput {
  disconnect: [CarePlanWhereUniqueInput!]
  set: [CarePlanWhereUniqueInput!]
  create: [CarePlanCreateInput!]
  connect: [CarePlanWhereUniqueInput!]
}

input ChecklistRelateToManyForUpdateInput {
  disconnect: [ChecklistWhereUniqueInput!]
  set: [ChecklistWhereUniqueInput!]
  create: [ChecklistCreateInput!]
  connect: [ChecklistWhereUniqueInput!]
}

input QuestionnaireUpdateArgs {
  where: QuestionnaireWhereUniqueInput!
  data: QuestionnaireUpdateInput!
}

input QuestionnaireCreateInput {
  title: String
  description: String
  questionnaireType: QuestionnaireQuestionnaireTypeType
  category: String
  isActive: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  questions: QuestionRelateToManyForCreateInput
  responses: QuestionnaireResponseRelateToManyForCreateInput
  carePlans: CarePlanRelateToManyForCreateInput
  checklists: ChecklistRelateToManyForCreateInput
}

input QuestionRelateToManyForCreateInput {
  create: [QuestionCreateInput!]
  connect: [QuestionWhereUniqueInput!]
}

input CarePlanRelateToManyForCreateInput {
  create: [CarePlanCreateInput!]
  connect: [CarePlanWhereUniqueInput!]
}

input ChecklistRelateToManyForCreateInput {
  create: [ChecklistCreateInput!]
  connect: [ChecklistWhereUniqueInput!]
}

type QuestionnaireResponse {
  id: ID!
  status: QuestionnaireResponseStatusType
  progressScore: Float
  completionPercentage: Float
  startedAt: DateTime
  completedAt: DateTime
  lastSavedAt: DateTime
  user: User
  questionnaire: Questionnaire
  carePlan: CarePlan
  checklist: Checklist
  questionResponses(where: QuestionResponseWhereInput! = {}, orderBy: [QuestionResponseOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: QuestionResponseWhereUniqueInput): [QuestionResponse!]
  questionResponsesCount(where: QuestionResponseWhereInput! = {}): Int
}

enum QuestionnaireResponseStatusType {
  draft
  completed
  in_progress
}

input QuestionnaireResponseWhereUniqueInput {
  id: ID
}

input QuestionnaireResponseWhereInput {
  AND: [QuestionnaireResponseWhereInput!]
  OR: [QuestionnaireResponseWhereInput!]
  NOT: [QuestionnaireResponseWhereInput!]
  id: IDFilter
  status: QuestionnaireResponseStatusTypeNullableFilter
  progressScore: FloatNullableFilter
  completionPercentage: FloatNullableFilter
  startedAt: DateTimeNullableFilter
  completedAt: DateTimeNullableFilter
  lastSavedAt: DateTimeNullableFilter
  user: UserWhereInput
  questionnaire: QuestionnaireWhereInput
  carePlan: CarePlanWhereInput
  checklist: ChecklistWhereInput
  questionResponses: QuestionResponseManyRelationFilter
}

input QuestionnaireResponseStatusTypeNullableFilter {
  equals: QuestionnaireResponseStatusType
  in: [QuestionnaireResponseStatusType!]
  notIn: [QuestionnaireResponseStatusType!]
  not: QuestionnaireResponseStatusTypeNullableFilter
}

input QuestionnaireResponseOrderByInput {
  id: OrderDirection
  status: OrderDirection
  progressScore: OrderDirection
  completionPercentage: OrderDirection
  startedAt: OrderDirection
  completedAt: OrderDirection
  lastSavedAt: OrderDirection
}

input QuestionnaireResponseUpdateInput {
  status: QuestionnaireResponseStatusType
  progressScore: Float
  completionPercentage: Float
  startedAt: DateTime
  completedAt: DateTime
  lastSavedAt: DateTime
  user: UserRelateToOneForUpdateInput
  questionnaire: QuestionnaireRelateToOneForUpdateInput
  carePlan: CarePlanRelateToOneForUpdateInput
  checklist: ChecklistRelateToOneForUpdateInput
  questionResponses: QuestionResponseRelateToManyForUpdateInput
}

input CarePlanRelateToOneForUpdateInput {
  create: CarePlanCreateInput
  connect: CarePlanWhereUniqueInput
  disconnect: Boolean
}

input ChecklistRelateToOneForUpdateInput {
  create: ChecklistCreateInput
  connect: ChecklistWhereUniqueInput
  disconnect: Boolean
}

input QuestionnaireResponseUpdateArgs {
  where: QuestionnaireResponseWhereUniqueInput!
  data: QuestionnaireResponseUpdateInput!
}

input QuestionnaireResponseCreateInput {
  status: QuestionnaireResponseStatusType
  progressScore: Float
  completionPercentage: Float
  startedAt: DateTime
  completedAt: DateTime
  lastSavedAt: DateTime
  user: UserRelateToOneForCreateInput
  questionnaire: QuestionnaireRelateToOneForCreateInput
  carePlan: CarePlanRelateToOneForCreateInput
  checklist: ChecklistRelateToOneForCreateInput
  questionResponses: QuestionResponseRelateToManyForCreateInput
}

input CarePlanRelateToOneForCreateInput {
  create: CarePlanCreateInput
  connect: CarePlanWhereUniqueInput
}

input ChecklistRelateToOneForCreateInput {
  create: ChecklistCreateInput
  connect: ChecklistWhereUniqueInput
}

type Resource {
  id: ID!
  link: String!
  content: String!
  checklist: Checklist
}

input ResourceWhereUniqueInput {
  id: ID
}

input ResourceWhereInput {
  AND: [ResourceWhereInput!]
  OR: [ResourceWhereInput!]
  NOT: [ResourceWhereInput!]
  id: IDFilter
  link: StringFilter
  content: StringFilter
  checklist: ChecklistWhereInput
}

input ResourceOrderByInput {
  id: OrderDirection
  link: OrderDirection
  content: OrderDirection
}

input ResourceUpdateInput {
  link: String
  content: String
  checklist: ChecklistRelateToOneForUpdateInput
}

input ResourceUpdateArgs {
  where: ResourceWhereUniqueInput!
  data: ResourceUpdateInput!
}

input ResourceCreateInput {
  link: String
  content: String
  checklist: ChecklistRelateToOneForCreateInput
}

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  avatarUrl: String
  age: Int
  gender: String
  privacyToggle: Boolean
  messages(where: ChatMessageWhereInput! = {}, orderBy: [ChatMessageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ChatMessageWhereUniqueInput): [ChatMessage!]
  messagesCount(where: ChatMessageWhereInput! = {}): Int
  isAdmin: Boolean
  createdAt: DateTime
  lastLoginDate: DateTime
  lastUpdateDate: DateTime
  carePlan(where: CarePlanWhereInput! = {}, orderBy: [CarePlanOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CarePlanWhereUniqueInput): [CarePlan!]
  carePlanCount(where: CarePlanWhereInput! = {}): Int
  aiChatSessions(where: AiChatSessionWhereInput! = {}, orderBy: [AiChatSessionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AiChatSessionWhereUniqueInput): [AiChatSession!]
  aiChatSessionsCount(where: AiChatSessionWhereInput! = {}): Int
  parents(where: ParentWhereInput! = {}, orderBy: [ParentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ParentWhereUniqueInput): [Parent!]
  parentsCount(where: ParentWhereInput! = {}): Int
  ownedChats(where: GroupChatWhereInput! = {}, orderBy: [GroupChatOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: GroupChatWhereUniqueInput): [GroupChat!]
  ownedChatsCount(where: GroupChatWhereInput! = {}): Int
  memberChats(where: GroupChatWhereInput! = {}, orderBy: [GroupChatOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: GroupChatWhereUniqueInput): [GroupChat!]
  memberChatsCount(where: GroupChatWhereInput! = {}): Int
  forumPost(where: ForumPostWhereInput! = {}, orderBy: [ForumPostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ForumPostWhereUniqueInput): [ForumPost!]
  forumPostCount(where: ForumPostWhereInput! = {}): Int
  questionnaireResponses(where: QuestionnaireResponseWhereInput! = {}, orderBy: [QuestionnaireResponseOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: QuestionnaireResponseWhereUniqueInput): [QuestionnaireResponse!]
  questionnaireResponsesCount(where: QuestionnaireResponseWhereInput! = {}): Int
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  avatarUrl: StringFilter
  age: IntNullableFilter
  gender: StringNullableFilter
  privacyToggle: BooleanFilter
  messages: ChatMessageManyRelationFilter
  isAdmin: BooleanFilter
  createdAt: DateTimeNullableFilter
  lastLoginDate: DateTimeNullableFilter
  lastUpdateDate: DateTimeNullableFilter
  carePlan: CarePlanManyRelationFilter
  aiChatSessions: AiChatSessionManyRelationFilter
  parents: ParentManyRelationFilter
  ownedChats: GroupChatManyRelationFilter
  memberChats: GroupChatManyRelationFilter
  forumPost: ForumPostManyRelationFilter
  questionnaireResponses: QuestionnaireResponseManyRelationFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: StringNullableFilter
}

input AiChatSessionManyRelationFilter {
  every: AiChatSessionWhereInput
  some: AiChatSessionWhereInput
  none: AiChatSessionWhereInput
}

input ParentManyRelationFilter {
  every: ParentWhereInput
  some: ParentWhereInput
  none: ParentWhereInput
}

input GroupChatManyRelationFilter {
  every: GroupChatWhereInput
  some: GroupChatWhereInput
  none: GroupChatWhereInput
}

input ForumPostManyRelationFilter {
  every: ForumPostWhereInput
  some: ForumPostWhereInput
  none: ForumPostWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  avatarUrl: OrderDirection
  age: OrderDirection
  gender: OrderDirection
  privacyToggle: OrderDirection
  isAdmin: OrderDirection
  createdAt: OrderDirection
  lastLoginDate: OrderDirection
  lastUpdateDate: OrderDirection
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  avatarUrl: String
  age: Int
  gender: String
  privacyToggle: Boolean
  messages: ChatMessageRelateToManyForUpdateInput
  isAdmin: Boolean
  createdAt: DateTime
  lastLoginDate: DateTime
  lastUpdateDate: DateTime
  carePlan: CarePlanRelateToManyForUpdateInput
  aiChatSessions: AiChatSessionRelateToManyForUpdateInput
  parents: ParentRelateToManyForUpdateInput
  ownedChats: GroupChatRelateToManyForUpdateInput
  memberChats: GroupChatRelateToManyForUpdateInput
  forumPost: ForumPostRelateToManyForUpdateInput
  questionnaireResponses: QuestionnaireResponseRelateToManyForUpdateInput
}

input AiChatSessionRelateToManyForUpdateInput {
  disconnect: [AiChatSessionWhereUniqueInput!]
  set: [AiChatSessionWhereUniqueInput!]
  create: [AiChatSessionCreateInput!]
  connect: [AiChatSessionWhereUniqueInput!]
}

input ParentRelateToManyForUpdateInput {
  disconnect: [ParentWhereUniqueInput!]
  set: [ParentWhereUniqueInput!]
  create: [ParentCreateInput!]
  connect: [ParentWhereUniqueInput!]
}

input GroupChatRelateToManyForUpdateInput {
  disconnect: [GroupChatWhereUniqueInput!]
  set: [GroupChatWhereUniqueInput!]
  create: [GroupChatCreateInput!]
  connect: [GroupChatWhereUniqueInput!]
}

input ForumPostRelateToManyForUpdateInput {
  disconnect: [ForumPostWhereUniqueInput!]
  set: [ForumPostWhereUniqueInput!]
  create: [ForumPostCreateInput!]
  connect: [ForumPostWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  avatarUrl: String
  age: Int
  gender: String
  privacyToggle: Boolean
  messages: ChatMessageRelateToManyForCreateInput
  isAdmin: Boolean
  createdAt: DateTime
  lastLoginDate: DateTime
  lastUpdateDate: DateTime
  carePlan: CarePlanRelateToManyForCreateInput
  aiChatSessions: AiChatSessionRelateToManyForCreateInput
  parents: ParentRelateToManyForCreateInput
  ownedChats: GroupChatRelateToManyForCreateInput
  memberChats: GroupChatRelateToManyForCreateInput
  forumPost: ForumPostRelateToManyForCreateInput
  questionnaireResponses: QuestionnaireResponseRelateToManyForCreateInput
}

input AiChatSessionRelateToManyForCreateInput {
  create: [AiChatSessionCreateInput!]
  connect: [AiChatSessionWhereUniqueInput!]
}

input ParentRelateToManyForCreateInput {
  create: [ParentCreateInput!]
  connect: [ParentWhereUniqueInput!]
}

input GroupChatRelateToManyForCreateInput {
  create: [GroupChatCreateInput!]
  connect: [GroupChatWhereUniqueInput!]
}

input ForumPostRelateToManyForCreateInput {
  create: [ForumPostCreateInput!]
  connect: [ForumPostWhereUniqueInput!]
}

"""JSON custom scalar type"""
scalar JSON

type Mutation {
  createAiChatSession(data: AiChatSessionCreateInput!): AiChatSession
  createAiChatSessions(data: [AiChatSessionCreateInput!]!): [AiChatSession]
  updateAiChatSession(where: AiChatSessionWhereUniqueInput!, data: AiChatSessionUpdateInput!): AiChatSession
  updateAiChatSessions(data: [AiChatSessionUpdateArgs!]!): [AiChatSession]
  deleteAiChatSession(where: AiChatSessionWhereUniqueInput!): AiChatSession
  deleteAiChatSessions(where: [AiChatSessionWhereUniqueInput!]!): [AiChatSession]
  createAiMessage(data: AiMessageCreateInput!): AiMessage
  createAiMessages(data: [AiMessageCreateInput!]!): [AiMessage]
  updateAiMessage(where: AiMessageWhereUniqueInput!, data: AiMessageUpdateInput!): AiMessage
  updateAiMessages(data: [AiMessageUpdateArgs!]!): [AiMessage]
  deleteAiMessage(where: AiMessageWhereUniqueInput!): AiMessage
  deleteAiMessages(where: [AiMessageWhereUniqueInput!]!): [AiMessage]
  createCarePlan(data: CarePlanCreateInput!): CarePlan
  createCarePlans(data: [CarePlanCreateInput!]!): [CarePlan]
  updateCarePlan(where: CarePlanWhereUniqueInput!, data: CarePlanUpdateInput!): CarePlan
  updateCarePlans(data: [CarePlanUpdateArgs!]!): [CarePlan]
  deleteCarePlan(where: CarePlanWhereUniqueInput!): CarePlan
  deleteCarePlans(where: [CarePlanWhereUniqueInput!]!): [CarePlan]
  createChatMessage(data: ChatMessageCreateInput!): ChatMessage
  createChatMessages(data: [ChatMessageCreateInput!]!): [ChatMessage]
  updateChatMessage(where: ChatMessageWhereUniqueInput!, data: ChatMessageUpdateInput!): ChatMessage
  updateChatMessages(data: [ChatMessageUpdateArgs!]!): [ChatMessage]
  deleteChatMessage(where: ChatMessageWhereUniqueInput!): ChatMessage
  deleteChatMessages(where: [ChatMessageWhereUniqueInput!]!): [ChatMessage]
  createChecklist(data: ChecklistCreateInput!): Checklist
  createChecklists(data: [ChecklistCreateInput!]!): [Checklist]
  updateChecklist(where: ChecklistWhereUniqueInput!, data: ChecklistUpdateInput!): Checklist
  updateChecklists(data: [ChecklistUpdateArgs!]!): [Checklist]
  deleteChecklist(where: ChecklistWhereUniqueInput!): Checklist
  deleteChecklists(where: [ChecklistWhereUniqueInput!]!): [Checklist]
  createForumPost(data: ForumPostCreateInput!): ForumPost
  createForumPosts(data: [ForumPostCreateInput!]!): [ForumPost]
  updateForumPost(where: ForumPostWhereUniqueInput!, data: ForumPostUpdateInput!): ForumPost
  updateForumPosts(data: [ForumPostUpdateArgs!]!): [ForumPost]
  deleteForumPost(where: ForumPostWhereUniqueInput!): ForumPost
  deleteForumPosts(where: [ForumPostWhereUniqueInput!]!): [ForumPost]
  createGroupChat(data: GroupChatCreateInput!): GroupChat
  createGroupChats(data: [GroupChatCreateInput!]!): [GroupChat]
  updateGroupChat(where: GroupChatWhereUniqueInput!, data: GroupChatUpdateInput!): GroupChat
  updateGroupChats(data: [GroupChatUpdateArgs!]!): [GroupChat]
  deleteGroupChat(where: GroupChatWhereUniqueInput!): GroupChat
  deleteGroupChats(where: [GroupChatWhereUniqueInput!]!): [GroupChat]
  createParent(data: ParentCreateInput!): Parent
  createParents(data: [ParentCreateInput!]!): [Parent]
  updateParent(where: ParentWhereUniqueInput!, data: ParentUpdateInput!): Parent
  updateParents(data: [ParentUpdateArgs!]!): [Parent]
  deleteParent(where: ParentWhereUniqueInput!): Parent
  deleteParents(where: [ParentWhereUniqueInput!]!): [Parent]
  createQuestion(data: QuestionCreateInput!): Question
  createQuestions(data: [QuestionCreateInput!]!): [Question]
  updateQuestion(where: QuestionWhereUniqueInput!, data: QuestionUpdateInput!): Question
  updateQuestions(data: [QuestionUpdateArgs!]!): [Question]
  deleteQuestion(where: QuestionWhereUniqueInput!): Question
  deleteQuestions(where: [QuestionWhereUniqueInput!]!): [Question]
  createQuestionResponse(data: QuestionResponseCreateInput!): QuestionResponse
  createQuestionResponses(data: [QuestionResponseCreateInput!]!): [QuestionResponse]
  updateQuestionResponse(where: QuestionResponseWhereUniqueInput!, data: QuestionResponseUpdateInput!): QuestionResponse
  updateQuestionResponses(data: [QuestionResponseUpdateArgs!]!): [QuestionResponse]
  deleteQuestionResponse(where: QuestionResponseWhereUniqueInput!): QuestionResponse
  deleteQuestionResponses(where: [QuestionResponseWhereUniqueInput!]!): [QuestionResponse]
  createQuestionnaire(data: QuestionnaireCreateInput!): Questionnaire
  createQuestionnaires(data: [QuestionnaireCreateInput!]!): [Questionnaire]
  updateQuestionnaire(where: QuestionnaireWhereUniqueInput!, data: QuestionnaireUpdateInput!): Questionnaire
  updateQuestionnaires(data: [QuestionnaireUpdateArgs!]!): [Questionnaire]
  deleteQuestionnaire(where: QuestionnaireWhereUniqueInput!): Questionnaire
  deleteQuestionnaires(where: [QuestionnaireWhereUniqueInput!]!): [Questionnaire]
  createQuestionnaireResponse(data: QuestionnaireResponseCreateInput!): QuestionnaireResponse
  createQuestionnaireResponses(data: [QuestionnaireResponseCreateInput!]!): [QuestionnaireResponse]
  updateQuestionnaireResponse(where: QuestionnaireResponseWhereUniqueInput!, data: QuestionnaireResponseUpdateInput!): QuestionnaireResponse
  updateQuestionnaireResponses(data: [QuestionnaireResponseUpdateArgs!]!): [QuestionnaireResponse]
  deleteQuestionnaireResponse(where: QuestionnaireResponseWhereUniqueInput!): QuestionnaireResponse
  deleteQuestionnaireResponses(where: [QuestionnaireResponseWhereUniqueInput!]!): [QuestionnaireResponse]
  createResource(data: ResourceCreateInput!): Resource
  createResources(data: [ResourceCreateInput!]!): [Resource]
  updateResource(where: ResourceWhereUniqueInput!, data: ResourceUpdateInput!): Resource
  updateResources(data: [ResourceUpdateArgs!]!): [Resource]
  deleteResource(where: ResourceWhereUniqueInput!): Resource
  deleteResources(where: [ResourceWhereUniqueInput!]!): [Resource]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
  signup(input: SignupInput!): SignupResult!
  login(input: LoginInput!): LoginResult!
  customCreateForumPost(data: CustomCreateForumPostInput!): CustomCreateForumPostResult!
  customDeleteForumPost(id: ID!): CustomDeleteForumPostResult!
  customCreateGroupChat(input: CreateGroupChatInput!): CustomCreateGroupChatResult!
  sendChatMessage(input: SendChatMessageInput!): SendChatMessageResult!
  saveQuestionnaireResponse(input: SaveQuestionnaireResponseInput!): SaveQuestionnaireResponseResult!
  submitQuestionnaire(input: SubmitQuestionnaireInput!): SubmitQuestionnaireResult!
  updateProfile(input: UpdateProfileInput!): UpdateProfileResponse
  aiChat(input: AiChatInput!): AiChatResponse!
  createAiChatMessage(input: CreateAiChatMessageInput!): CreateAiChatMessageResult!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  aiChatSession(where: AiChatSessionWhereUniqueInput!): AiChatSession
  aiChatSessions(where: AiChatSessionWhereInput! = {}, orderBy: [AiChatSessionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AiChatSessionWhereUniqueInput): [AiChatSession!]
  aiChatSessionsCount(where: AiChatSessionWhereInput! = {}): Int
  aiMessage(where: AiMessageWhereUniqueInput!): AiMessage
  aiMessages(where: AiMessageWhereInput! = {}, orderBy: [AiMessageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AiMessageWhereUniqueInput): [AiMessage!]
  aiMessagesCount(where: AiMessageWhereInput! = {}): Int
  carePlan(where: CarePlanWhereUniqueInput!): CarePlan
  carePlans(where: CarePlanWhereInput! = {}, orderBy: [CarePlanOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CarePlanWhereUniqueInput): [CarePlan!]
  carePlansCount(where: CarePlanWhereInput! = {}): Int
  chatMessage(where: ChatMessageWhereUniqueInput!): ChatMessage
  chatMessages(where: ChatMessageWhereInput! = {}, orderBy: [ChatMessageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ChatMessageWhereUniqueInput): [ChatMessage!]
  chatMessagesCount(where: ChatMessageWhereInput! = {}): Int
  checklist(where: ChecklistWhereUniqueInput!): Checklist
  checklists(where: ChecklistWhereInput! = {}, orderBy: [ChecklistOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ChecklistWhereUniqueInput): [Checklist!]
  checklistsCount(where: ChecklistWhereInput! = {}): Int
  forumPost(where: ForumPostWhereUniqueInput!): ForumPost
  forumPosts(where: ForumPostWhereInput! = {}, orderBy: [ForumPostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ForumPostWhereUniqueInput): [ForumPost!]
  forumPostsCount(where: ForumPostWhereInput! = {}): Int
  groupChat(where: GroupChatWhereUniqueInput!): GroupChat
  groupChats(where: GroupChatWhereInput! = {}, orderBy: [GroupChatOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: GroupChatWhereUniqueInput): [GroupChat!]
  groupChatsCount(where: GroupChatWhereInput! = {}): Int
  parent(where: ParentWhereUniqueInput!): Parent
  parents(where: ParentWhereInput! = {}, orderBy: [ParentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ParentWhereUniqueInput): [Parent!]
  parentsCount(where: ParentWhereInput! = {}): Int
  question(where: QuestionWhereUniqueInput!): Question
  questions(where: QuestionWhereInput! = {}, orderBy: [QuestionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: QuestionWhereUniqueInput): [Question!]
  questionsCount(where: QuestionWhereInput! = {}): Int
  questionResponse(where: QuestionResponseWhereUniqueInput!): QuestionResponse
  questionResponses(where: QuestionResponseWhereInput! = {}, orderBy: [QuestionResponseOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: QuestionResponseWhereUniqueInput): [QuestionResponse!]
  questionResponsesCount(where: QuestionResponseWhereInput! = {}): Int
  questionnaire(where: QuestionnaireWhereUniqueInput!): Questionnaire
  questionnaires(where: QuestionnaireWhereInput! = {}, orderBy: [QuestionnaireOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: QuestionnaireWhereUniqueInput): [Questionnaire!]
  questionnairesCount(where: QuestionnaireWhereInput! = {}): Int
  questionnaireResponse(where: QuestionnaireResponseWhereUniqueInput!): QuestionnaireResponse
  questionnaireResponses(where: QuestionnaireResponseWhereInput! = {}, orderBy: [QuestionnaireResponseOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: QuestionnaireResponseWhereUniqueInput): [QuestionnaireResponse!]
  questionnaireResponsesCount(where: QuestionnaireResponseWhereInput! = {}): Int
  resource(where: ResourceWhereUniqueInput!): Resource
  resources(where: ResourceWhereInput! = {}, orderBy: [ResourceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ResourceWhereUniqueInput): [Resource!]
  resourcesCount(where: ResourceWhereInput! = {}): Int
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
  userProfile: UserProfile
  getResources(input: GetResourcesInput): ResourceConnection!
  getForumPost(id: ID!): ForumPostDetails
  getForumPosts(input: GetForumPostsInput): ForumPostConnection!
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  graphql: KeystoneAdminUIGraphQL!
  initialColumns: [String!]!
  initialSearchFields: [String!]!
  initialSort: KeystoneAdminUISort
  isSingleton: Boolean!
  hideCreate: Boolean!
  hideDelete: Boolean!
  isHidden: Boolean!
  itemQueryName: String!
  listQueryName: String!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUIGraphQL {
  names: KeystoneAdminUIGraphQLNames!
}

type KeystoneAdminUIGraphQLNames {
  outputTypeName: String!
  whereInputName: String!
  whereUniqueInputName: String!
  createInputName: String!
  createMutationName: String!
  createManyMutationName: String!
  relateToOneForCreateInputName: String!
  relateToManyForCreateInputName: String!
  itemQueryName: String!
  listOrderName: String!
  listQueryCountName: String!
  listQueryName: String!
  updateInputName: String!
  updateMutationName: String!
  updateManyInputName: String!
  updateManyMutationName: String!
  relateToOneForUpdateInputName: String!
  relateToManyForUpdateInputName: String!
  deleteMutationName: String!
  deleteManyMutationName: String!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}

input SaveQuestionnaireResponseInput {
  questionnaireId: ID!
  carePlanId: ID
  checklistId: ID
  responses: [QuestionResponseInput!]!
  isDraft: Boolean
}

input QuestionResponseInput {
  questionId: ID!
  answer: JSON!
  confidence: Int
  notes: String
}

input SubmitQuestionnaireInput {
  questionnaireResponseId: ID!
  updateCarePlanProgress: Boolean
}

type SaveQuestionnaireResponseResult {
  questionnaireResponseId: ID!
  message: String!
  completionPercentage: Float!
  carePlanUpdated: Boolean
  checklistUpdated: Boolean
}

type SubmitQuestionnaireResult {
  questionnaireResponseId: ID!
  message: String!
  completedAt: DateTime!
  carePlanProgressScore: Float
  checklistCompletionScore: Float
}

input SignupInput {
  name: String!
  email: String!
  password: String!
  age: Int
  gender: String
  avatarUrl: String
}

input LoginInput {
  email: String!
  password: String!
}

type SignupResult {
  user: UserProfile!
  token: String!
}

type LoginResult {
  user: UserProfile!
  token: String!
}

type UserProfile {
  id: ID!
  name: String
  email: String
  avatarUrl: String
  age: Int
  gender: String
  privacyToggle: Boolean
  isAdmin: Boolean
  createdAt: DateTime
  lastLoginDate: DateTime
  lastUpdateDate: DateTime
}

input GetResourcesInput {
  first: Int
  after: String
  checklistId: ID
  searchTerm: String
  orderBy: ResourceOrderBy
}

enum ResourceOrderBy {
  ID_ASC
  ID_DESC
  CONTENT_ASC
  CONTENT_DESC
}

type ResourceConnection {
  edges: [ResourceEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type ResourceEdge {
  node: Resource!
  cursor: String!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

input CustomCreateForumPostInput {
  title: String!
  topic: String!
  content: String!
}

type CustomCreateForumPostResult {
  forumPost: ForumPostDetails!
  message: String!
}

type CustomDeleteForumPostResult {
  success: Boolean!
  message: String!
  deletedPostId: ID!
}

input GetForumPostsInput {
  first: Int
  after: String
  topic: String
  authorId: ID
  searchTerm: String
  dateFrom: DateTime
  dateTo: DateTime
  orderBy: ForumPostOrderBy
}

enum ForumPostOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  TITLE_ASC
  TITLE_DESC
}

type ForumPostConnection {
  edges: [ForumPostEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type ForumPostEdge {
  node: ForumPostDetails!
  cursor: String!
}

type ForumPostDetails {
  id: ID!
  title: String!
  topic: String!
  content: String!
  createdAt: DateTime!
  updatedAt: DateTime
  author: UserProfile
}

input CreateGroupChatInput {
  groupName: String!
  memberIds: [ID!]!
}

type CustomCreateGroupChatResult {
  groupId: ID!
  groupName: String!
  message: String!
}

input SendChatMessageInput {
  groupId: String!
  message: String!
}

type SendChatMessageResult {
  chatMessage: ChatMessageType!
  message: String!
}

type ChatMessageType {
  id: ID!
  message: String!
  createdAt: DateTime!
  sender: UserProfile
  group: ID!
}

input AiChatMessageInput {
  role: String!
  content: String!
}

input AiChatInput {
  messages: [AiChatMessageInput!]!
  systemPrompt: String
  temperature: Float
  provider: String
}

type AiChatResponse {
  content: String!
  usage: JSON
  metadata: JSON
}

input CreateAiChatMessageInput {
  sessionId: ID
  prompt: String!
}

type CreateAiChatMessageResult {
  success: Boolean!
  message: String
  error: String
  sessionId: ID
}

input UpdateProfileInput {
  name: String
  email: String
  age: Int
  gender: String
  avatarUrl: String
  currentPassword: String
}

type UpdateProfileResponse {
  success: Boolean!
  message: String
  error: String
  userId: ID
}
