// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource mysql {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "mysql"
}

generator client {
  provider = "prisma-client-js"
}

model AiChatSession {
  id           String                  @id @default(uuid())
  title        String                  @default("")
  status       AiChatSessionStatusType @default(active)
  metadata     Json?                   @default("{}")
  createdAt    DateTime?               @default(now())
  updatedAt    DateTime?               @default(now()) @updatedAt
  lastActiveAt DateTime?               @default(now()) @updatedAt
  user         User?                   @relation("AiChatSession_user", fields: [userId], references: [id])
  userId       String?                 @map("user")
  messages     AiMessage[]             @relation("AiMessage_session")

  @@index([userId])
}

model AiMessage {
  id               String              @id @default(uuid())
  content          String              @default("")
  author           AiMessageAuthorType
  model            String              @default("")
  createdAt        DateTime?           @default(now())
  temperature      Float?
  latencyMs        Int?
  promptTokens     Int?
  completionTokens Int?
  totalTokens      Int?
  toolName         String              @default("")
  toolArgs         Json?
  toolResult       Json?
  error            Json?
  session          AiChatSession?      @relation("AiMessage_session", fields: [sessionId], references: [id])
  sessionId        String?             @map("session")
  parentMessage    AiMessage?          @relation("AiMessage_parentMessage", fields: [parentMessageId], references: [id])
  parentMessageId  String?             @map("parentMessage")
  childMessages    AiMessage[]         @relation("AiMessage_parentMessage")

  @@index([sessionId])
  @@index([parentMessageId])
}

model CarePlan {
  id                     String                  @id @default(uuid())
  name                   String                  @default("")
  progressScore          Float?
  lastAssessmentAt       DateTime?
  createdAt              DateTime?               @default(now())
  updatedAt              DateTime?               @default(now()) @updatedAt
  user                   User?                   @relation("CarePlan_user", fields: [userId], references: [id])
  userId                 String?                 @map("user")
  questionnaires         Questionnaire[]         @relation("CarePlan_questionnaires")
  questionnaireResponses QuestionnaireResponse[] @relation("QuestionnaireResponse_carePlan")

  @@index([userId])
}

model ChatMessage {
  id        String     @id @default(uuid())
  message   String     @default("")
  createdAt DateTime?  @default(now())
  group     GroupChat? @relation("ChatMessage_group", fields: [groupId], references: [id])
  groupId   String?    @map("group")
  sender    User?      @relation("ChatMessage_sender", fields: [senderId], references: [id])
  senderId  String?    @map("sender")

  @@index([groupId])
  @@index([senderId])
}

model Checklist {
  id                     String                  @id @default(uuid())
  name                   String                  @default("")
  completionScore        Float?
  createdAt              DateTime?               @default(now())
  updatedAt              DateTime?               @default(now()) @updatedAt
  resources              Resource[]              @relation("Resource_checklist")
  questionnaires         Questionnaire[]         @relation("Checklist_questionnaires")
  questionnaireResponses QuestionnaireResponse[] @relation("QuestionnaireResponse_checklist")
}

model ForumPost {
  id        String    @id @default(uuid())
  title     String    @default("")
  topic     String    @default("")
  content   String    @default("")
  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now())
  author    User?     @relation("ForumPost_author", fields: [authorId], references: [id])
  authorId  String?   @map("author")

  @@index([authorId])
}

model GroupChat {
  id        String        @id @default(uuid())
  groupName String        @default("")
  messages  ChatMessage[] @relation("ChatMessage_group")
  createdAt DateTime?     @default(now()) @map("created_at")
  updatedAt DateTime?     @updatedAt @map("updated_at")
  owner     User?         @relation("GroupChat_owner", fields: [ownerId], references: [id])
  ownerId   String?       @map("ownerId")
  members   User[]        @relation("GroupChat_members")

  @@index([ownerId])
}

model Parent {
  id                Int       @id @default(autoincrement())
  name              String    @default("")
  age               Int
  relationship      String    @default("")
  health_conditions Json?
  created_at        DateTime? @default(now())
  updated_at        DateTime? @updatedAt
  user              User?     @relation("Parent_user", fields: [userId], references: [id])
  userId            String?   @map("user")

  @@index([userId])
}

model Question {
  id              String                   @id @default(uuid())
  questionText    String                   @default("")
  questionType    QuestionQuestionTypeType @default(text)
  options         Json?
  isRequired      Boolean                  @default(false)
  order           Int?                     @default(0)
  category        String                   @default("")
  minValue        Int?
  maxValue        Int?
  questionnaire   Questionnaire?           @relation("Question_questionnaire", fields: [questionnaireId], references: [id])
  questionnaireId String?                  @map("questionnaire")
  responses       QuestionResponse[]       @relation("QuestionResponse_question")

  @@index([questionnaireId])
}

model QuestionResponse {
  id                      String                 @id @default(uuid())
  answer                  Json?
  confidence              Int?
  notes                   String                 @default("")
  answeredAt              DateTime?              @default(now())
  updatedAt               DateTime?              @default(now()) @updatedAt
  question                Question?              @relation("QuestionResponse_question", fields: [questionId], references: [id])
  questionId              String?                @map("question")
  questionnaireResponse   QuestionnaireResponse? @relation("QuestionResponse_questionnaireResponse", fields: [questionnaireResponseId], references: [id])
  questionnaireResponseId String?                @map("questionnaireResponse")

  @@index([questionId])
  @@index([questionnaireResponseId])
}

model Questionnaire {
  id                String                             @id @default(uuid())
  title             String                             @default("")
  description       String                             @default("")
  questionnaireType QuestionnaireQuestionnaireTypeType @default(general_assessment)
  category          String                             @default("")
  isActive          Boolean                            @default(true)
  createdAt         DateTime?                          @default(now())
  updatedAt         DateTime?                          @default(now()) @updatedAt
  questions         Question[]                         @relation("Question_questionnaire")
  responses         QuestionnaireResponse[]            @relation("QuestionnaireResponse_questionnaire")
  carePlans         CarePlan[]                         @relation("CarePlan_questionnaires")
  checklists        Checklist[]                        @relation("Checklist_questionnaires")
}

model QuestionnaireResponse {
  id                   String                          @id @default(uuid())
  status               QuestionnaireResponseStatusType @default(draft)
  progressScore        Float?
  completionPercentage Float?
  startedAt            DateTime?                       @default(now())
  completedAt          DateTime?
  lastSavedAt          DateTime?                       @default(now()) @updatedAt
  user                 User?                           @relation("QuestionnaireResponse_user", fields: [userId], references: [id])
  userId               String?                         @map("user")
  questionnaire        Questionnaire?                  @relation("QuestionnaireResponse_questionnaire", fields: [questionnaireId], references: [id])
  questionnaireId      String?                         @map("questionnaire")
  carePlan             CarePlan?                       @relation("QuestionnaireResponse_carePlan", fields: [carePlanId], references: [id])
  carePlanId           String?                         @map("carePlan")
  checklist            Checklist?                      @relation("QuestionnaireResponse_checklist", fields: [checklistId], references: [id])
  checklistId          String?                         @map("checklist")
  questionResponses    QuestionResponse[]              @relation("QuestionResponse_questionnaireResponse")

  @@index([userId])
  @@index([questionnaireId])
  @@index([carePlanId])
  @@index([checklistId])
}

model Resource {
  id          Int        @id @default(autoincrement())
  link        String     @default("")
  content     String     @default("")
  checklist   Checklist? @relation("Resource_checklist", fields: [checklistId], references: [id])
  checklistId String?    @map("checklist")

  @@index([checklistId])
}

model User {
  id                     String                  @id @default(uuid())
  name                   String                  @default("")
  email                  String                  @unique @default("")
  password               String
  avatarUrl              String                  @default("")
  age                    Int?
  gender                 String?
  privacyToggle          Boolean                 @default(true)
  messages               ChatMessage[]           @relation("ChatMessage_sender")
  isAdmin                Boolean                 @default(true)
  createdAt              DateTime?               @default(now())
  lastLoginDate          DateTime?               @default(now())
  lastUpdateDate         DateTime?               @updatedAt
  carePlan               CarePlan[]              @relation("CarePlan_user")
  aiChatSessions         AiChatSession[]         @relation("AiChatSession_user")
  parents                Parent[]                @relation("Parent_user")
  ownedChats             GroupChat[]             @relation("GroupChat_owner")
  memberChats            GroupChat[]             @relation("GroupChat_members")
  forumPost              ForumPost[]             @relation("ForumPost_author")
  questionnaireResponses QuestionnaireResponse[] @relation("QuestionnaireResponse_user")
}

enum AiChatSessionStatusType {
  active
  paused
  completed
  archived
}

enum AiMessageAuthorType {
  user
  assistant
  system
  tool
}

enum QuestionQuestionTypeType {
  text
  multiple_choice
  rating_scale
  boolean
  scale
}

enum QuestionnaireQuestionnaireTypeType {
  care_plan_assessment
  checklist_evaluation
  general_assessment
  progress_review
}

enum QuestionnaireResponseStatusType {
  draft
  completed
  in_progress
}
