name: Deploy

on:
  # workflow_dispatch allows triggering deployments manually
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy'
        required: false
        type: string
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - dev
          - staging
          - prod
      deploy_backend:
        description: 'Backend'
        type: boolean
        required: true
        default: true
      deploy_frontend:
        description: 'Frontend'
        type: boolean
        required: true
        default: true

      deploy_storybook:
        description: 'Storybook'
        type: boolean
        required: true
        default: true
  # repository_dispatch allows triggering deployments programmatically from build.yml
  repository_dispatch:
    types: [deploy]

# refactored concurrency to have required workflow context and handle both workflow_dispatch and repository_dispatch events
concurrency:
  group: ${{ github.workflow }}-${{ github.event_name == 'workflow_dispatch' && github.event.inputs.environment || github.event_name == 'repository_dispatch' && github.event.client_payload.environment }}
  cancel-in-progress: true # cancels in-progress deployments for the same group

# run-name differentiates between workflow_dispatch and repository_dispatch events and dynamically sets deployment type (FULL or PARTIAL)
run-name: |
  ${{ github.event_name == 'workflow_dispatch' && (
    github.event.inputs.deploy_backend == 'true' && github.event.inputs.deploy_frontend == 'true' && github.event.inputs.deploy_storybook == 'true' && 'FULL' || 'PARTIAL'
  ) || github.event_name == 'repository_dispatch' && (
    github.event.client_payload.deploy_backend == true && github.event.client_payload.deploy_frontend == true && github.event.client_payload.deploy_storybook == true && 'FULL' || 'PARTIAL'
  ) }} Deploy ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.version || github.event.client_payload.version }} to ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.environment || github.event.client_payload.environment }} by @${{ github.actor }}

permissions:
  actions: write
  contents: write

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}

jobs:
  set_matrix:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Set Matrix Based on Branch or Workflow Dispatch
        id: set-matrix
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo 'matrix={"environment":["${{ github.event.inputs.environment }}"]}' >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo 'matrix={"environment":["staging"]}' >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo 'matrix={"environment":["dev"]}' >> $GITHUB_OUTPUT
          else
            echo 'matrix={"environment":[]}' >> $GITHUB_OUTPUT
          fi

  deploy-backend:
    needs: [set_matrix]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'
    strategy:
      matrix: ${{ fromJson(needs.set_matrix.outputs.matrix) }}
    environment: ${{ matrix.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set environment variables
        id: set-env
        run: |
          if [ "${{ matrix.environment }}" = "prod" ]; then
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "image_tag=latest" >> $GITHUB_OUTPUT
            echo "additional_tag=prod" >> $GITHUB_OUTPUT
            echo "stack_name=vura-prod" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.environment }}" = "dev" ]; then
            echo "environment=dev" >> $GITHUB_OUTPUT
            echo "image_tag=latest" >> $GITHUB_OUTPUT
            echo "additional_tag=dev" >> $GITHUB_OUTPUT
            echo "stack_name=vura-dev" >> $GITHUB_OUTPUT
          else
            echo "environment=staging" >> $GITHUB_OUTPUT
            echo "image_tag=latest" >> $GITHUB_OUTPUT
            echo "additional_tag=staging" >> $GITHUB_OUTPUT
            echo "stack_name=vura-staging" >> $GITHUB_OUTPUT
          fi

      - name: Check ECS resources
        id: check-ecs
        env:
          ENVIRONMENT: ${{ steps.set-env.outputs.environment }}
          ECS_CLUSTER: ${{ secrets.ECS_CLUSTER }}
          ECS_SERVICE: ${{ secrets.ECS_SERVICE }}
          TASK_DEF_FAMILY: ${{ secrets.TASK_DEF_FAMILY }}
        run: .github/scripts/check-ecs.sh

      - name: Update ECS task definition
        if: steps.check-ecs.outputs.ecs_exists == 'true'
        env:
          ENVIRONMENT: ${{ steps.set-env.outputs.environment }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: ${{ steps.set-env.outputs.image_tag }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          SHADOW_DATABASE_URL: ${{ secrets.SHADOW_DATABASE_URL }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_PORT: ${{ secrets.DB_PORT }}
          TASK_DEF_FAMILY: ${{ steps.check-ecs.outputs.task_def_family }}
        run: .github/scripts/update-ecs-task-def.sh

      - name: Update ECS service
        if: steps.check-ecs.outputs.ecs_exists == 'true'
        env:
          ENVIRONMENT: ${{ steps.set-env.outputs.environment }}
          CLUSTER_NAME: ${{ steps.check-ecs.outputs.cluster }}
          SERVICE_NAME: ${{ steps.check-ecs.outputs.service_name }}
          TASK_DEF_FAMILY: ${{ steps.check-ecs.outputs.task_def_family }}
        run: .github/scripts/update-ecs-service.sh

      - name: Wait for deployment to complete
        if: steps.check-ecs.outputs.ecs_exists == 'true'
        env:
          ENVIRONMENT: ${{ steps.set-env.outputs.environment }}
          CLUSTER_NAME: ${{ steps.check-ecs.outputs.cluster }}
          SERVICE_NAME: ${{ steps.check-ecs.outputs.service_name }}
        run: .github/scripts/wait-for-deployment.sh

      - name: ECS Resources Not Found
        if: steps.check-ecs.outputs.ecs_exists == 'false'
        run: |
          echo "ECS resources not found."
          echo "This could mean:"
          echo "1. The CloudFormation stack with backend resources is not deployed"
          echo "2. The ECS cluster/task definitions don't exist yet"
          echo "3. AWS credentials don't have permission to access ECS resources"
          echo "4. Resources are in a different AWS region"
          echo ""
          echo "To deploy backend resources, confirm:"
          echo "- CloudFormation stack is deployed with EnableBackendResources=true"
          echo "- ECS cluster and task definitions are created"
          echo "- GitHub secrets are properly configured"
          echo "- AWS region is set correctly (currently: $AWS_REGION)"
          echo ""
          echo "Docker image was successfully built and pushed to ECR"
          echo "Ready for deployment once ECS resources are available"

  deploy-frontend:
    needs: [set_matrix]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'
    strategy:
      matrix: ${{ fromJson(needs.set_matrix.outputs.matrix) }}
    environment: ${{ matrix.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24'
          cache: 'npm'

      - name: Install frontend dependencies
        run: npm ci --ignore-scripts

      - name: Build frontend application
        run: npm run frontend:build
        env:
          VITE_API_URL: ${{ secrets.API_URL }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy frontend to S3 bucket
        working-directory: ./apps/frontend
        run: |
          aws s3 sync dist/ s3://${{ secrets.BUCKET_NAME }} --delete
          aws s3 cp dist/index.html s3://${{ secrets.BUCKET_NAME }}/index.html --cache-control "no-cache"

      - name: Invalidate CloudFront cache
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.DISTRIBUTION_ID }} \
            --paths "/*"

  deploy-storybook:
    needs: [set_matrix]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.set_matrix.outputs.matrix) }}
    environment: ${{ matrix.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24'
          cache: 'npm'

      - name: Install frontend dependencies
        run: npm ci --ignore-scripts

      - name: Build Storybook
        run: npm run storybook:build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy Storybook to S3
        working-directory: ./apps/frontend
        run: |
          aws s3 sync storybook-static/ s3://${{ secrets.STORYBOOK_BUCKET_NAME }} --delete

      - name: Invalidate Storybook CloudFront cache
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.STORYBOOK_DISTRIBUTION_ID }} \
            --paths "/*"
